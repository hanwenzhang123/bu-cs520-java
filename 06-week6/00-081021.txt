Threading
- A process is a program (or part of a program) running in its own memory space - the JVM is an example
- A thread is a single, lightweight process running within a process
- multiple threads share memory space allocated to the process (ie Heap)
- even thread gets its own stack memory for its call tree and locally scoped variables
- the OS scheduler is responsible for allocating cycles / time-slices to threads for execution
- computers can run just one thread per CPU at a time
  socket - what the CPU chip connects into
  core - a full blown CPU on a chip, usually, we have multiple cores on a single chip
- with multiple CPUs we can achieve true multithreading/parallelism
- with a single CPU we can still run multiple threads, however, the scheduler divides the CPU time into multiple slots and will switch allocation between threads

Use case for multithreading
- threading is tool, no different than the data structures we just learned about, 
  and like those different collections you must know when it is appropriate to use one versus another
- threads can lock other threads from running
- if you do not handle the concurrency properly, you could have "data corruption" and other unplanned consequences
- in general, the problem you are trying to solve dictates whether you can benefit from implementing threading. 
  you want to consider the pros and cons carefully and validate your implementation via testing
    - use threading when
      - you can easily isolate and divide up the work (assignment 6 as it is currently specified is not a good candidate for threading)
      - lots of calculations
      - very little shared data between threads
      - you have enough system capacity to handle it
    - do not use threading when the above is not true
- you do not determine threading but the scheduler in your system, sheduler call the run method, you never call it yourself

Threading in Java
- java has native support for thread concurrency as a fundamental concept
  - java.lang.Object provides methods that facilitate multithreading for all classes to use (i.e. notify, notifyAll, wait, ...)
- there is always at least one thread running when you execute a program, regardless of whether yo usee it or interact with it
- to create threaded processes, there are two approaches in Java:
  - subclass java.lang.Thread
  - Implement the java.lang.Runnable interface
- these are computationally equal

subclassing java lang.Thread
- to use this approach, your class will extend Thread
- a new thread is created when the class is instantiated
- the class must have a method called public void run()
  - the method signature must match exactly
  - the metho can optionally contain code that executes when the thread starts
- classes that instantiate the thread class can start the thread by invoking the start() method
- start() triggers run()

implementing java.lang.Runnable
- to use this approach, your class will implement the Runnabl interface
- otherwise, works just like the Thread subclass approach with run() and the start() methods

Thread synchronization
- when using threads, you much always be aware of what all the threads could be doing
- multiple threads working on the same data cause data inconsistency
- the synchronized keyword can prevent this problem by temporarily locking the method/block, and not allowing other threads access

Thread synchronization: notify() and wait()
- using wait(), code within a synchronized block can release its hold on the thread to wait for another thread to complete its work
- the thread to be waited on must call notify() or notifyAll() to alert other threads that its work is complete
- threads can sleep() for a period of time, yield() control the other threads and join() other threads
- improper synchronization of threads can lead to deadlock

Networking in Java: Working with URLs
- java has support for networking built in under java.net package
- for enterprise web support, Java has another editor called Java EE (enterprised edition) which is beyond the scope of this course
- URL = uniformed resource locator
- java.net.URL is a simple class that can store and retrieve components within a URL

Connecting to a networked resource
- java.net.URLConnection can take a URL object instance and create a connection using its openConnection() method
- with a connection open, java can be read from it using streams and readers from java.io
  
